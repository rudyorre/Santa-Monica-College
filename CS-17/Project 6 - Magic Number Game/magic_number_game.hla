//    file: magic_number_game.hla
//    name: Rudy Orre
// section: 1770
//    date: 4/4/21
// purpose: get the user to guess the magic number
//   input: 1 magic int8 and up to 5 in8 guesses
//  output: directional hints, last try warning, and win/lose output
//  sample:
//  Gimme the magic number: 50
//  Gimme a starting number: 20
//  Higher
//  Higher
//  Higher
//  Next: 32
//  Higher
//  Sorry Charlie, You Lost The Game!

program magic_number_game;

#include ( "stdlib.hhf" );
static
magic_number : int8;
guess_number : int8;

begin magic_number_game;

// input for magic number
stdout.put ( "Gimme the magic number: " );
stdin.get( magic_number );

// jump to for loop (to avoid code blocks below)
jmp fl;

// input for starting number (1st guess)
first_input:
stdout.put ( "Gimme a starting number: " );
jmp input_done;

// input for other numbers (2nd, 3rd, 4th, 5th guesses)
other_input:
stdout.put ( nl, "Next: ");
jmp input_done;

// last try warning
last_try:
stdout.put ( nl, "Last Try!" );
jmp last_try_done;

// lower response
lower_response:
stdout.put ( "Lower" );
jmp response_done;

// higher response
higher_response:
stdout.put ( "Higher" );
jmp response_done;

// correct response
correct_response:
stdout.put ( "You Won The Game!" );
jmp game_done; // jump to end of game since game is done

// for loop (5 iterations)
fl:
fl_init:
mov ( 0, BL ); // initialize incrementor
mov ( magic_number, CL ); // load magic_number to CL for comparison later
fl_test:
cmp ( BL, 5 );
jge fl_done; // if BL is greater than or equal to 4, end loop
fl_body:

// warning if last iteration
cmp ( BL, 4 );
jz last_try;
last_try_done:

// inputs for guesses
cmp ( BL, 0 );
jz first_input; // prompt for first guess
jnz other_input; // prompt for all subsequent guesses
input_done: // both prompts jump back to here
stdin.get( guess_number ); // input to guess_number occurs for all prompts

// response to guesses
cmp ( CL, guess_number ); // comparing magic number (CL) to user's guess
jz correct_response; // if magic number is equal

cmp ( BL, 4 ); // comparing iterator to 4
jz fl_done; // if last iteration and not correct, end loop

cmp ( CL, guess_number ); // comparing magic number to guess
jl lower_response; // if magic number is less
jg higher_response; // if magic number is more
response_done:

inc ( BL ); // increment the incrementor
jmp fl_test; // jump to test section
fl_done:

stdout.put ( "Sorry Charlie, You Lost The Game!" );

game_done:


end magic_number_game;
